meta = ({
    id: "admin.pterodactyl", async: false, layout: "admin",
    document: { title: "Pterodactyl", description: hc.settings.branding.seo.description },
    permissions: { level: 0, intent: "admin" }
});

// Get existing configurations if available
let pteroConfig = hc.db.get("pterodactyl") || { nodes: [], locations: [], softwares: [] };

data = (req) => (
    <>
        <div class="w-full rounded-xl bg-zinc-900/50 border border-zinc-800/80 p-4">
            <h1 class="text-zinc-200 text-xl mb-4">Pterodactyl Integration</h1>
            
            {/* Tabs */}
            <div class="border-b border-zinc-800 mb-4">
                <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="pteroTabs" role="tablist">
                    <li class="mr-2" role="presentation">
                        <button class="inline-block p-4 border-b-2 rounded-t-lg hover:text-zinc-300 hover:border-zinc-300 ptero-tab active" 
                                id="locations-tab" 
                                data-tab="locations"
                                type="button">
                            Locations
                        </button>
                    </li>
                    <li class="mr-2" role="presentation">
                        <button class="inline-block p-4 border-b-2 border-transparent rounded-t-lg hover:text-zinc-300 hover:border-zinc-300 ptero-tab" 
                                id="nodes-tab" 
                                data-tab="nodes"
                                type="button">
                            Nodes
                        </button>
                    </li>
                    <li class="mr-2" role="presentation">
                        <button class="inline-block p-4 border-b-2 border-transparent rounded-t-lg hover:text-zinc-300 hover:border-zinc-300 ptero-tab" 
                                id="softwares-tab" 
                                data-tab="softwares"
                                type="button">
                            Eggs/Software
                        </button>
                    </li>
                </ul>
            </div>
            
            {/* Tab Content */}
            <div id="pteroTabContent">
                {/* Locations Tab Content */}
                <div class="ptero-tab-content" id="locations-content">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg text-zinc-300">Locations</h2>
                        <button id="fetch-locations" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-lg text-white transition">
                            Fetch Locations
                        </button>
                    </div>
                    
                    <div class="mb-4 hidden" id="locations-list-container">
                        <div class="w-full mt-4 overflow-x-auto">
                            <table class="w-full border-collapse">
                                <thead>
                                    <tr class="bg-zinc-900 border border-zinc-800 rounded-lg">
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">ID</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">Short Code</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">Description</th>
                                        <th class="px-4 py-3 text-right text-xs font-medium text-zinc-400 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="locations-list" class="divide-y divide-zinc-800">
                                    {/* Locations will be loaded here */}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div id="location-config-form" class="hidden mt-6 border border-zinc-800 rounded-lg p-4">
                        <h3 class="text-zinc-300 mb-4">Configure Location</h3>
                        <form id="location-form">
                            <input type="hidden" id="location-id" name="id">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Location Name</label>
                                    <input type="text" id="location-name" name="name" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Display Name</label>
                                    <input type="text" id="location-display-name" name="displayName" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Image URL</label>
                                    <input type="text" id="location-image" name="image" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Fee Multiplier (1.0 = no fee)</label>
                                    <input type="number" id="location-fee" name="fee" step="0.01" min="1" value="1.0" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2 col-span-2">
                                    <label class="text-zinc-400 text-sm">Description</label>
                                    <textarea id="location-description" name="description" rows="3" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none"></textarea>
                                </div>
                            </div>
                            <div class="flex justify-end gap-3">
                                <button type="button" id="cancel-location" class="px-4 py-2 bg-zinc-700 hover:bg-zinc-600 rounded-lg text-zinc-200 transition">
                                    Cancel
                                </button>
                                <button type="submit" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-lg text-white transition">
                                    Save Configuration
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                
                {/* Nodes Tab Content */}
                <div class="ptero-tab-content hidden" id="nodes-content">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg text-zinc-300">Nodes</h2>
                        <button id="fetch-nodes" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-lg text-white transition">
                            Fetch Nodes
                        </button>
                    </div>
                    
                    <div class="mb-4 hidden" id="nodes-list-container">
                        <div class="w-full mt-4 overflow-x-auto">
                            <table class="w-full border-collapse">
                                <thead>
                                    <tr class="bg-zinc-900 border border-zinc-800 rounded-lg">
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">ID</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">Name</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">Location</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">FQDN</th>
                                        <th class="px-4 py-3 text-right text-xs font-medium text-zinc-400 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="nodes-list" class="divide-y divide-zinc-800">
                                    {/* Nodes will be loaded here */}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div id="node-config-form" class="hidden mt-6 border border-zinc-800 rounded-lg p-4">
                        <h3 class="text-zinc-300 mb-4">Configure Node</h3>
                        <form id="node-form">
                            <input type="hidden" id="node-id" name="id">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Node Name</label>
                                    <input type="text" id="node-name" name="name" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Display Name</label>
                                    <input type="text" id="node-display-name" name="displayName" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Image URL</label>
                                    <input type="text" id="node-image" name="image" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Fee Multiplier (1.0 = no fee)</label>
                                    <input type="number" id="node-fee" name="fee" step="0.01" min="1" value="1.0" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2 col-span-2">
                                    <label class="text-zinc-400 text-sm">Description</label>
                                    <textarea id="node-description" name="description" rows="3" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none"></textarea>
                                </div>
                            </div>
                            <div class="flex justify-end gap-3">
                                <button type="button" id="cancel-node" class="px-4 py-2 bg-zinc-700 hover:bg-zinc-600 rounded-lg text-zinc-200 transition">
                                    Cancel
                                </button>
                                <button type="submit" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-lg text-white transition">
                                    Save Configuration
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                
                {/* Softwares/Eggs Tab Content */}
                <div class="ptero-tab-content hidden" id="softwares-content">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-lg text-zinc-300">Eggs/Software</h2>
                        <button id="fetch-eggs" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-lg text-white transition">
                            Fetch Eggs
                        </button>
                    </div>
                    
                    <div class="mb-4 hidden" id="softwares-list-container">
                        <div class="w-full mt-4 overflow-x-auto">
                            <table class="w-full border-collapse">
                                <thead>
                                    <tr class="bg-zinc-900 border border-zinc-800 rounded-lg">
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">ID</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">Name</th>
                                        <th class="px-4 py-3 text-left text-xs font-medium text-zinc-400 uppercase tracking-wider">Nest</th>
                                        <th class="px-4 py-3 text-right text-xs font-medium text-zinc-400 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="softwares-list" class="divide-y divide-zinc-800">
                                    {/* Eggs will be loaded here */}
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div id="software-config-form" class="hidden mt-6 border border-zinc-800 rounded-lg p-4">
                        <h3 class="text-zinc-300 mb-4">Configure Software</h3>
                        <form id="software-form">
                            <input type="hidden" id="software-id" name="id">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Software Name</label>
                                    <input type="text" id="software-name" name="name" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Display Name</label>
                                    <input type="text" id="software-display-name" name="displayName" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Image URL</label>
                                    <input type="text" id="software-image" name="image" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2">
                                    <label class="text-zinc-400 text-sm">Fee Multiplier (1.0 = no fee)</label>
                                    <input type="number" id="software-fee" name="fee" step="0.01" min="1" value="1.0" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none">
                                </div>
                                <div class="flex flex-col gap-2 col-span-2">
                                    <label class="text-zinc-400 text-sm">Description</label>
                                    <textarea id="software-description" name="description" rows="3" class="bg-zinc-900/50 border border-zinc-800/80 rounded-xl p-2 outline-none"></textarea>
                                </div>
                            </div>
                            <div class="flex justify-end gap-3">
                                <button type="button" id="cancel-software" class="px-4 py-2 bg-zinc-700 hover:bg-zinc-600 rounded-lg text-zinc-200 transition">
                                    Cancel
                                </button>
                                <button type="submit" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 rounded-lg text-white transition">
                                    Save Configuration
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            {/* Success/Error Message */}
            <div id="ptero-message" class="fixed bottom-4 right-4 p-4 rounded-lg text-white hidden"></div>
        </div>

        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Tab switching
                const tabs = document.querySelectorAll('.ptero-tab');
                const tabContents = document.querySelectorAll('.ptero-tab-content');
                
                tabs.forEach(tab => {
                    tab.addEventListener('click', () => {
                        // Deactivate all tabs
                        tabs.forEach(t => t.classList.remove('active', 'text-zinc-300', 'border-zinc-300'));
                        tabContents.forEach(content => content.classList.add('hidden'));
                        
                        // Activate selected tab
                        tab.classList.add('active', 'text-zinc-300', 'border-zinc-300');
                        const tabId = tab.getAttribute('data-tab');
                        document.getElementById(`${tabId}-content`).classList.remove('hidden');
                    });
                });

                // Initialize data structures
                let pteroData = {
                    locations: ${JSON.stringify(pteroConfig.locations || [])},
                    nodes: ${JSON.stringify(pteroConfig.nodes || [])},
                    softwares: ${JSON.stringify(pteroConfig.softwares || [])}
                };
                
                // Helper to show messages
                function showMessage(message, isError = false) {
                    const msgElement = document.getElementById('ptero-message');
                    msgElement.textContent = message;
                    msgElement.classList.remove('hidden', 'bg-green-600', 'bg-red-600');
                    msgElement.classList.add(isError ? 'bg-red-600' : 'bg-green-600');
                    
                    setTimeout(() => {
                        msgElement.classList.add('hidden');
                    }, 3000);
                }

                // Helper to save configurations
                function saveConfig() {
                    fetch('/api/admin/pterodactyl/save', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(pteroData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showMessage('Configuration saved successfully');
                        } else {
                            showMessage('Failed to save configuration', true);
                        }
                    })
                    .catch(error => {
                        console.error('Error saving configuration:', error);
                        showMessage('An error occurred while saving', true);
                    });
                }

                // Locations functionality
                const fetchLocationsBtn = document.getElementById('fetch-locations');
                const locationsListContainer = document.getElementById('locations-list-container');
                const locationsList = document.getElementById('locations-list');
                const locationForm = document.getElementById('location-form');
                const locationConfigForm = document.getElementById('location-config-form');
                const cancelLocationBtn = document.getElementById('cancel-location');

                fetchLocationsBtn.addEventListener('click', () => {
                    fetch('/api/admin/pterodactyl/locations')
                        .then(response => response.json())
                        .then(data => {
                            locationsList.innerHTML = '';
                            
                            data.forEach(location => {
                                // Check if we have this location saved in our configuration
                                const savedLocation = pteroData.locations.find(l => l.id === location.id);
                                
                                const row = document.createElement('tr');
                                row.className = 'hover:bg-zinc-800/30 transition-colors';
                                row.innerHTML = `
                                    <td class="px-4 py-3 text-sm text-zinc-300">${location.id}</td>
                                    <td class="px-4 py-3 text-sm text-zinc-300">${location.attributes.short}</td>
                                    <td class="px-4 py-3 text-sm text-zinc-300">${location.attributes.long}</td>
                                    <td class="px-4 py-3 text-sm">
                                        <div class="flex space-x-2 items-end justify-end">
                                            <button class="p-1.5 rounded-lg bg-zinc-800 hover:bg-zinc-700 transition-colors configure-location" data-id="${location.id}">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-zinc-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                                </svg>
                                            </button>
                                            ${savedLocation ? `<span class="p-1.5 rounded-lg bg-green-800/40 text-green-400 text-xs">Configured</span>` : ''}
                                        </div>
                                    </td>
                                `;
                                locationsList.appendChild(row);
                            });
                            
                            locationsListContainer.classList.remove('hidden');
                            
                            // Add event listeners for configure buttons
                            document.querySelectorAll('.configure-location').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    const locationId = this.getAttribute('data-id');
                                    const location = data.find(l => l.id === locationId);
                                    const savedLocation = pteroData.locations.find(l => l.id === locationId);
                                    
                                    document.getElementById('location-id').value = locationId;
                                    document.getElementById('location-name').value = location.attributes.short;
                                    
                                    // Pre-fill form with saved values if they exist
                                    document.getElementById('location-display-name').value = savedLocation?.displayName || location.attributes.short;
                                    document.getElementById('location-image').value = savedLocation?.image || '';
                                    document.getElementById('location-fee').value = savedLocation?.fee || 1.0;
                                    document.getElementById('location-description').value = savedLocation?.description || location.attributes.long;
                                    
                                    locationConfigForm.classList.remove('hidden');
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching locations:', error);
                            showMessage('Failed to fetch locations', true);
                        });
                });

                locationForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const locationId = document.getElementById('location-id').value;
                    const locationData = {
                        id: locationId,
                        name: document.getElementById('location-name').value,
                        displayName: document.getElementById('location-display-name').value,
                        image: document.getElementById('location-image').value,
                        fee: parseFloat(document.getElementById('location-fee').value),
                        description: document.getElementById('location-description').value,
                    };
                    
                    // Update or add the location to our data
                    const existingIndex = pteroData.locations.findIndex(l => l.id === locationId);
                    if (existingIndex >= 0) {
                        pteroData.locations[existingIndex] = locationData;
                    } else {
                        pteroData.locations.push(locationData);
                    }
                    
                    saveConfig();
                    locationConfigForm.classList.add('hidden');
                    fetchLocationsBtn.click(); // Refresh the list
                });

                cancelLocationBtn.addEventListener('click', function() {
                    locationConfigForm.classList.add('hidden');
                });

                // Nodes functionality
                const fetchNodesBtn = document.getElementById('fetch-nodes');
                const nodesListContainer = document.getElementById('nodes-list-container');
                const nodesList = document.getElementById('nodes-list');
                const nodeForm = document.getElementById('node-form');
                const nodeConfigForm = document.getElementById('node-config-form');
                const cancelNodeBtn = document.getElementById('cancel-node');

                fetchNodesBtn.addEventListener('click', () => {
                    fetch('/api/admin/pterodactyl/nodes')
                        .then(response => response.json())
                        .then(data => {
                            nodesList.innerHTML = '';
                            
                            data.forEach(node => {
                                // Check if we have this node saved in our configuration
                                const savedNode = pteroData.nodes.find(n => n.id === node.id);
                                
                                const row = document.createElement('tr');
                                row.className = 'hover:bg-zinc-800/30 transition-colors';
                                row.innerHTML = `
                                    <td class="px-4 py-3 text-sm text-zinc-300">${node.id}</td>
                                    <td class="px-4 py-3 text-sm text-zinc-300">${node.attributes.name}</td>
                                    <td class="px-4 py-3 text-sm text-zinc-300">${node.attributes.location_id}</td>
                                    <td class="px-4 py-3 text-sm text-zinc-300">${node.attributes.fqdn}</td>
                                    <td class="px-4 py-3 text-sm">
                                        <div class="flex space-x-2 items-end justify-end">
                                            <button class="p-1.5 rounded-lg bg-zinc-800 hover:bg-zinc-700 transition-colors configure-node" data-id="${node.id}">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-zinc-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                                </svg>
                                            </button>
                                            ${savedNode ? `<span class="p-1.5 rounded-lg bg-green-800/40 text-green-400 text-xs">Configured</span>` : ''}
                                        </div>
                                    </td>
                                `;
                                nodesList.appendChild(row);
                            });
                            
                            nodesListContainer.classList.remove('hidden');
                            
                            // Add event listeners for configure buttons
                            document.querySelectorAll('.configure-node').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    const nodeId = this.getAttribute('data-id');
                                    const node = data.find(n => n.id === nodeId);
                                    const savedNode = pteroData.nodes.find(n => n.id === nodeId);
                                    
                                    document.getElementById('node-id').value = nodeId;
                                    document.getElementById('node-name').value = node.attributes.name;
                                    
                                    // Pre-fill form with saved values if they exist
                                    document.getElementById('node-display-name').value = savedNode?.displayName || node.attributes.name;
                                    document.getElementById('node-image').value = savedNode?.image || '';
                                    document.getElementById('node-fee').value = savedNode?.fee || 1.0;
                                    document.getElementById('node-description').value = savedNode?.description || '';
                                    
                                    nodeConfigForm.classList.remove('hidden');
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching nodes:', error);
                            showMessage('Failed to fetch nodes', true);
                        });
                });

                nodeForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const nodeId = document.getElementById('node-id').value;
                    const nodeData = {
                        id: nodeId,
                        name: document.getElementById('node-name').value,
                        displayName: document.getElementById('node-display-name').value,
                        image: document.getElementById('node-image').value,
                        fee: parseFloat(document.getElementById('node-fee').value),
                        description: document.getElementById('node-description').value,
                    };
                    
                    // Update or add the node to our data
                    const existingIndex = pteroData.nodes.findIndex(n => n.id === nodeId);
                    if (existingIndex >= 0) {
                        pteroData.nodes[existingIndex] = nodeData;
                    } else {
                        pteroData.nodes.push(nodeData);
                    }
                    
                    saveConfig();
                    nodeConfigForm.classList.add('hidden');
                    fetchNodesBtn.click(); // Refresh the list
                });

                cancelNodeBtn.addEventListener('click', function() {
                    nodeConfigForm.classList.add('hidden');
                });

                // Softwares/Eggs functionality
                const fetchEggsBtn = document.getElementById('fetch-eggs');
                const softwaresListContainer = document.getElementById('softwares-list-container');
                const softwaresList = document.getElementById('softwares-list');
                const softwareForm = document.getElementById('software-form');
                const softwareConfigForm = document.getElementById('software-config-form');
                const cancelSoftwareBtn = document.getElementById('cancel-software');

                fetchEggsBtn.addEventListener('click', () => {
                    fetch('/api/admin/pterodactyl/eggs')
                        .then(response => response.json())
                        .then(data => {
                            softwaresList.innerHTML = '';
                            
                            data.forEach(egg => {
                                // Check if we have this software saved in our configuration
                                const savedSoftware = pteroData.softwares.find(s => s.id === egg.id);
                                
                                const row = document.createElement('tr');
                                row.className = 'hover:bg-zinc-800/30 transition-colors';
                                row.innerHTML = `
                                    <td class="px-4 py-3 text-sm text-zinc-300">${egg.id}</td>
                                    <td class="px-4 py-3 text-sm text-zinc-300">${egg.attributes.name}</td>
                                    <td class="px-4 py-3 text-sm text-zinc-300">${egg.attributes.nest}</td>
                                    <td class="px-4 py-3 text-sm">
                                        <div class="flex space-x-2 items-end justify-end">
                                            <button class="p-1.5 rounded-lg bg-zinc-800 hover:bg-zinc-700 transition-colors configure-software" data-id="${egg.id}">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-zinc-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                                                </svg>
                                            </button>
                                            ${savedSoftware ? `<span class="p-1.5 rounded-lg bg-green-800/40 text-green-400 text-xs">Configured</span>` : ''}
                                        </div>
                                    </td>
                                `;
                                softwaresList.appendChild(row);
                            });
                            
                            softwaresListContainer.classList.remove('hidden');
                            
                            // Add event listeners for configure buttons
                            document.querySelectorAll('.configure-software').forEach(btn => {
                                btn.addEventListener('click', function() {
                                    const softwareId = this.getAttribute('data-id');
                                    const software = data.find(s => s.id === softwareId);
                                    const savedSoftware = pteroData.softwares.find(s => s.id === softwareId);
                                    
                                    document.getElementById('software-id').value = softwareId;
                                    document.getElementById('software-name').value = software.attributes.name;
                                    
                                    // Pre-fill form with saved values if they exist
                                    document.getElementById('software-display-name').value = savedSoftware?.displayName || software.attributes.name;
                                    document.getElementById('software-image').value = savedSoftware?.image || '';
                                    document.getElementById('software-fee').value = savedSoftware?.fee || 1.0;
                                    document.getElementById('software-description').value = savedSoftware?.description || '';
                                    
                                    softwareConfigForm.classList.remove('hidden');
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error fetching eggs:', error);
                            showMessage('Failed to fetch eggs', true);
                        });
                });

                softwareForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const softwareId = document.getElementById('software-id').value;
                    const softwareData = {
                        id: softwareId,
                        name: document.getElementById('software-name').value,
                        displayName: document.getElementById('software-display-name').value,
                        image: document.getElementById('software-image').value,
                        fee: parseFloat(document.getElementById('software-fee').value),
                        description: document.getElementById('software-description').value,
                    };
                    
                    // Update or add the software to our data
                    const existingIndex = pteroData.softwares.findIndex(s => s.id === softwareId);
                    if (existingIndex >= 0) {
                        pteroData.softwares[existingIndex] = softwareData;
                    } else {
                        pteroData.softwares.push(softwareData);
                    }
                    
                    saveConfig();
                    softwareConfigForm.classList.add('hidden');
                    fetchEggsBtn.click(); // Refresh the list
                });

                cancelSoftwareBtn.addEventListener('click', function() {
                    softwareConfigForm.classList.add('hidden');
                });
            });
        </script>
    </>
)

module.exports = { meta, data };